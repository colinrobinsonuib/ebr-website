---
import { getEntries, getCollection } from 'astro:content';
import { hasGlosses, extractWorksCited } from '../../lib/utils';
import { threadColors, threadDescriptions, threadTitles } from '../../lib/threads';

import { renderTitle } from '../../lib/renderTitle';

import { postTypeColors } from '../../lib/postTypes';
import PostArticle from '../../components/widget/PostArticle.astro';
import ContentLayout from '../../layouts/ContentLayout.astro';

export async function getStaticPaths() {
	const posts = await getCollection('posts');
	return posts.map((post) => ({
		params: { id: post.id, postType: post.data.type },
		props: { post },
	}));
}

const { post } = Astro.props;

const title = await renderTitle(post.data.title);
const authors = await getEntries(post.data.authors);
const worksCited = await extractWorksCited(post.body);

const threadColor = post.data.thread ? threadColors[post.data.thread] : '#000';
const postTypeColor = postTypeColors[post.data.type] || '#000';
---
<style is:inline>
	.spotify-sticky {
		position: fixed !important;
		bottom: 0 !important;
		top: unset !important;
		background: #005c5c !important;
		height: 80px !important;
	}
</style>
<ContentLayout title={title}>
	<div
		class="mx-auto mt-6 w-full max-w-7xl"
		style={'--threadColor: ' + threadColor + '; --postTypeColor: ' + postTypeColor}>
		{
			post.data.thread && (
				<div class="flex flex-row">
					<div class="relative h-24 w-64">
						<a
							href={'/threads/' + post.data.thread + '/1'}
							class="bg-thread absolute bottom-0 flex w-64 translate-y-20 transform cursor-pointer flex-col rounded-t-4xl py-6 text-center font-mono text-lg transition-transform duration-300 ease-in-out hover:translate-y-4">
							<span class="text-white">{threadTitles[post.data.thread]}</span>
							<span class="mt-6 text-balance text-black">
								read more in {threadTitles[post.data.thread]}
							</span>
						</a>
					</div>
					{worksCited && (
						<div
							id="works-cited-tab"
							class="hidden h-24 w-64 translate-y-5 cursor-pointer rounded-t-4xl bg-black py-6 text-center font-mono text-lg text-white transition-transform duration-300 ease-in-out hover:translate-y-3 sm:block">
							works cited
						</div>
					)}
				</div>
			)
		}
		<div class="border-thread relative flex flex-row bg-white dark:bg-black md:border-10">
			<aside class="mt-36 hidden w-64 border-r-2 border-neutral-500 lg:block">
				{
					post.data.thread && (
						<div class="mt-[-9rem] p-4 font-mono text-sm text-gray-500">
							<span class="italic">{threadDescriptions[post.data.thread].text}</span>
							<div class="text-right">- {threadDescriptions[post.data.thread].date}</div>
						</div>
					)
				}
			</aside>

			<main class="relative w-full flex-1 px-4 py-8 lg:min-w-3xl">
				<PostArticle post={post} authors={authors} title={title} />
				{
					worksCited && (
						<article
							class="prose m-auto hidden max-w-[75ch] text-lg prose-invert"
							set:html={worksCited}
						/>
					)
				}
			</main>

			<!-- Right aside -->
			<aside class="mt-36 hidden w-64 border-l-2 border-neutral-500 xl:block">
				{
					hasGlosses(post.body) && (
						<div class="bg-thread float-right mr-[-0.5rem] w-[15rem] p-2">
							<h4 class="font-medium tracking-wider text-white">Glosses â–¼</h4>
						</div>
					)
				}
			</aside>
		</div>
	</div>
</ContentLayout>
<script is:inline data-astro-rerun define:vars={{ postType: post.data.type }}>
	(() => {
		const worksCitedTab = document.getElementById('works-cited-tab');
		if(worksCitedTab) {
			worksCitedTab.addEventListener('click', () => {
				const main = document.querySelector('main');
				if (worksCitedTab.innerText === 'works cited') {
					worksCitedTab.innerText = postType;
					worksCitedTab.classList.remove('bg-black');
					worksCitedTab.classList.remove('text-white');
					worksCitedTab.classList.add('bg-postType');
					worksCitedTab.classList.add('text-black');
					main.classList.add('bg-black');
					} else {
					worksCitedTab.innerText = 'works cited';
					worksCitedTab.classList.add('bg-black');
					worksCitedTab.classList.add('text-white');
					worksCitedTab.classList.remove('bg-postType');
					worksCitedTab.classList.remove('text-black');
					main.classList.remove('bg-black');
					}
				document.querySelectorAll('article').forEach((el) => {
					el.classList.toggle('hidden');
					})
				});
		}

		// Get all margin note references and definitions
		const refs = document.querySelectorAll('.marginnote-ref');
		const defs = document.querySelectorAll('.marginnote-def');

		// Create a map for quick lookup of related elements
		const refToDefMap = new Map();
		const defToRefsMap = new Map();

		// Build the relationship maps
		refs.forEach((ref) => {
			const href = ref.getAttribute('href');
			if (href && href.startsWith('#')) {
				const defId = href.substring(1);
				const def = document.getElementById(defId);
				if (def) {
					const refWrap = ref.parentNode;
					refToDefMap.set(refWrap, def);

					// Add this ref to the definition's refs array
					if (!defToRefsMap.has(def)) {
						defToRefsMap.set(def, []);
					}
					defToRefsMap.get(def).push(refWrap);
				}
			}
		});

		// Add hover effects for references
		refs.forEach((ref) => {
			const refWrap = ref.parentNode;
			const relatedDef = refToDefMap.get(refWrap);
			if (relatedDef) {
				// When hovering over reference, apply hover effect to definition
				refWrap.addEventListener('mouseenter', () => {
					relatedDef.classList.add('hover-effect');
				});

				refWrap.addEventListener('mouseleave', () => {
					relatedDef.classList.remove('hover-effect');
				});

				ref.addEventListener('click', (event) => {
					// Convert rem to px and compare to xl (80rem)
					if (
						window.innerWidth <=
						80 * parseFloat(getComputedStyle(document.documentElement).fontSize)
					) {
						event.stopPropagation();
						event.preventDefault();
						relatedDef.classList.toggle('toggle-effect');
					}
				});
			}
		});

		// Add hover effects for definitions
		defs.forEach((def) => {
			const relatedRefs = defToRefsMap.get(def);
			if (relatedRefs) {
				// When hovering over definition, apply hover effect to all related references
				def.addEventListener('mouseenter', () => {
					relatedRefs.forEach((refWrap) => {
						refWrap.classList.add('hover-effect');
					});
				});

				def.addEventListener('mouseleave', () => {
					relatedRefs.forEach((refWrap) => {
						refWrap.classList.remove('hover-effect');
					});
				});
			}
		});

		if (postType === 'interview') {
			const spotifyPlayer = document.querySelector('iframe[src*="spotify.com"]');

			if (spotifyPlayer) {
				let userHasInteracted = false;
				let isPlayerInView = true;

				// Only make sticky if the user has clicked it AND it's scrolled out of view
				const updateStickyState = () => {
					if (userHasInteracted && !isPlayerInView) {
						spotifyPlayer.classList.add('spotify-sticky');
					} else {
						spotifyPlayer.classList.remove('spotify-sticky');
					}
				};

				const scrollTrigger = document.createElement('div');
				scrollTrigger.className = 'spotify-scroll-trigger';
				spotifyPlayer.parentNode.insertBefore(scrollTrigger, spotifyPlayer);

				const observer = new IntersectionObserver((entries) => {
					isPlayerInView = entries[0].isIntersecting;
					updateStickyState();
				}, { threshold: 0 });

				observer.observe(scrollTrigger);

				window.addEventListener('blur', () => {
					if (document.activeElement === spotifyPlayer) {
						userHasInteracted = true;
						updateStickyState();
					}
				});
			}
		}
	})();
</script>
