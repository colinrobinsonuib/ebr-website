---
import { getEntries, getCollection, render } from 'astro:content';
import ContentLayout from '../../../layouts/ContentLayout.astro';
import { hasGlosses, processBlurb } from '../../../lib/utils';
import { threadColors, threadDescriptions, threadTitles } from '../../../lib/threads';
import PostType from '../../../components/ui/PostType.astro';
import { renderTitle } from '../../../lib/renderTitle';

export async function getStaticPaths() {
	const posts = await getCollection('posts');
	return posts.map((post) => ({
		params: { id: post.id, postType: post.data.type },
		props: { post },
	}));
}

const { post } = Astro.props;

const authors = await getEntries(post.data.authors);

const blurb = post.data.blurb ? processBlurb(post.data.blurb) : '';
const title = await renderTitle(post.data.title);
const { Content } = await render(post);

const threadColor = post.data.thread ? threadColors[post.data.thread] : '#000';
---
<style is:inline>
	.bg-thread {
		background-color: var(--threadColor);
	}
	.border-thread {
		border-color: var(--threadColor);
	}
	#blurb p {
		margin: 0 0 1em;
	}
</style>

<ContentLayout title={title}>
	<div class="mx-auto mt-6 flex max-w-7xl flex-col" style={'--threadColor: ' + threadColor}>
		{
			post.data.thread && (
				<div class="flex flex-row">
					<div class="relative h-24 w-64">
						<a
							href={'/threads/' + post.data.thread}
							class="bg-thread absolute bottom-0 flex w-64 translate-y-20 transform cursor-pointer flex-col rounded-t-4xl py-6 text-center font-mono text-lg transition-transform duration-300 ease-in-out hover:translate-y-4">
							<span class="text-white">{threadTitles[post.data.thread]}</span>
							<span class="mt-6 text-balance text-black">
								read more in {threadTitles[post.data.thread]}
							</span>
						</a>
					</div>
					<a
						id="works-cited-tab"
						href={Astro.url.pathname + '/works-cited'}
						class="h-24 w-64 translate-y-5 cursor-pointer rounded-t-4xl bg-black text-white py-6 text-center font-mono text-lg transition-transform duration-300 ease-in-out hover:translate-y-3">
						works cited
					</a>
				</div>
			)
		}
		<div class="border-thread relative flex flex-row border-10 bg-white">
			<aside class="border-neutral-500 mt-36 hidden w-64 border-r-2 lg:block">
					{
						post.data.thread && (
							<div class="p-4 font-mono mt-[-9rem] text-sm text-gray-400">
								<span class="italic">{threadDescriptions[post.data.thread].text}</span>
								<div class="text-right">- {threadDescriptions[post.data.thread].date}</div>
							</div>
						)
					}
			</aside>

			<main class=" relative w-full flex-1 lg:min-w-3xl px-4 py-8">
					<article class="m-auto max-w-[75ch] text-lg">
						<PostType type={post.data.type} />
						<h1 class="text-3xl font-semibold dark:text-gray-50 mb-5" set:html={title}></h1>
						<div class="text-red-500 w-fit italic text-xl font-mono border-b mb-5">
							<span>by </span>
							{authors.map(author => (
								<a class="hover:text-black" href={'/authors/' + author.id}>{author.data.title}</a>
							)).reduce((prev, curr) => [prev, ', ', curr])}
						</div>
						<div class="font-mono text-xl mb-5" title={'last modified: ' + post.data.modified_date.toISOString().split('T')[0]}>{post.data.publish_date.toISOString().split('T')[0]}</div>

						<div class="flow-root my-5">
							{post.data.image && <img alt="featured image" src={post.data.image} class="h-40 w-40 mt-2 mb-1 mr-5 float-left"  />}
							{blurb && <div id="blurb" class="tracking-wide font-serif italic text-base" set:html={blurb}></div>}
						</div>

						<div class="prose">
							<Content />
						</div>
					</article>
			</main>

			<!-- Right aside -->
			<aside class="border-neutral-500 mt-36 hidden w-64 border-l-2 xl:block">
				{
					hasGlosses(post.body) && (
						<div class="bg-thread float-right mr-[-0.5rem] w-[15rem] p-2">
							<h4 class="text-white font-medium tracking-wider">Glosses â–¼</h4>
						</div>
					)
				}
			</aside>
		</div>
	</div>
</ContentLayout>

<script is:inline data-astro-rerun>
	(() => {
		// Get all margin note references and definitions
		const refs = document.querySelectorAll('.marginnote-ref');
		const defs = document.querySelectorAll('.marginnote-def');

		// Create a map for quick lookup of related elements
		const refToDefMap = new Map();
		const defToRefsMap = new Map();

		// Build the relationship maps
		refs.forEach((ref) => {
			const href = ref.getAttribute('href');
			if (href && href.startsWith('#')) {
				const defId = href.substring(1);
				const def = document.getElementById(defId);
				if (def) {
					const refWrap = ref.parentNode;
					refToDefMap.set(refWrap, def);

					// Add this ref to the definition's refs array
					if (!defToRefsMap.has(def)) {
						defToRefsMap.set(def, []);
					}
					defToRefsMap.get(def).push(refWrap);
				}
			}
		});

		// Add hover effects for references
		refs.forEach((ref) => {
			const refWrap = ref.parentNode;
			const relatedDef = refToDefMap.get(refWrap);
			if (relatedDef) {
				// When hovering over reference, apply hover effect to definition
				refWrap.addEventListener('mouseenter', () => {
					relatedDef.classList.add('hover-effect');
				});

				refWrap.addEventListener('mouseleave', () => {
					relatedDef.classList.remove('hover-effect');
				});

				ref.addEventListener('click', (event) => {
					// Convert rem to px and compare to xl (80rem)
					if (
						window.innerWidth <=
						80 * parseFloat(getComputedStyle(document.documentElement).fontSize)
					) {
						event.stopPropagation();
						event.preventDefault();
						relatedDef.classList.toggle('toggle-effect');
					}
				});
			}
		});

		// Add hover effects for definitions
		defs.forEach((def) => {
			const relatedRefs = defToRefsMap.get(def);
			if (relatedRefs) {
				// When hovering over definition, apply hover effect to all related references
				def.addEventListener('mouseenter', () => {
					relatedRefs.forEach((refWrap) => {
						refWrap.classList.add('hover-effect');
					});
				});

				def.addEventListener('mouseleave', () => {
					relatedRefs.forEach((refWrap) => {
						refWrap.classList.remove('hover-effect');
					});
				});
			}
		});
	})();
</script>
