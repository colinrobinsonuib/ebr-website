---
import { getEntries, getCollection, render } from 'astro:content';
import ContentLayout from '../../../layouts/ContentLayout.astro';
import { hasGlosses, prettyDate, prettyDateLong, extractWorksCited } from '../../../lib/utils';
import { threadColors, threadDescriptions, threadTitles } from '../../../lib/threads';

import { renderTitle } from '../../../lib/renderTitle';

import PostTabs from '../../../components/widget/PostTabs.svelte';
import TabContent from '../../../components/widget/TabContent.svelte';
import ByAuthors from '../../../components/ui/ByAuthors.astro';
import PostType from '../../../components/ui/PostType.astro';
import PostArticle from '../../../components/widget/PostArticle.astro';
import { postTypeColors } from '../../../lib/postTypes';

export async function getStaticPaths() {
	const posts = await getCollection('posts');
	return posts.map((post) => ({
		params: { id: post.id, postType: post.data.type },
		props: { post },
	}));
}

const { post } = Astro.props;

const title = await renderTitle(post.data.title);
const authors = await getEntries(post.data.authors);
const worksCited = await extractWorksCited(post.body);

const threadColor = post.data.thread ? threadColors[post.data.thread] : '#000';
const postTypeColor = postTypeColors[post.data.type] || '#000';
---
<ContentLayout title={title}>
	<div class="mx-auto mt-6 w-full max-w-7xl" style={'--threadColor: ' + threadColor + '; --postTypeColor: ' + postTypeColor}>
		{
			post.data.thread &&
			<PostTabs client:load postType={post.data.type} thread={post.data.thread} threadTitle={threadTitles[post.data.thread]}  />
		}
		<div class="border-thread relative flex flex-row md:border-10 bg-white">
			<aside class="mt-36 hidden w-64 border-r-2 border-neutral-500 lg:block">
				{
					post.data.thread && (
						<div class="mt-[-9rem] p-4 font-mono text-sm text-gray-400">
							<span class="italic">{threadDescriptions[post.data.thread].text}</span>
							<div class="text-right">- {threadDescriptions[post.data.thread].date}</div>
						</div>
					)
				}
			</aside>

			<main class="relative w-full flex-1 px-4 py-8 lg:min-w-3xl">
				<TabContent client:load index={0}>
					<PostArticle post={post} authors={authors} title={title} />
				</TabContent>
				<TabContent client:load index={1}>
					<article class="m-auto max-w-[75ch] text-lg" set:html={worksCited} />
				</TabContent>
			</main>

			<!-- Right aside -->
			<aside class="mt-36 hidden w-64 border-l-2 border-neutral-500 xl:block">
				{
					hasGlosses(post.body) && (
						<div class="bg-thread float-right mr-[-0.5rem] w-[15rem] p-2">
							<h4 class="font-medium tracking-wider text-white">Glosses â–¼</h4>
						</div>
					)
				}
			</aside>
		</div>
	</div>
</ContentLayout>

<script is:inline data-astro-rerun>
	(() => {
		// Get all margin note references and definitions
		const refs = document.querySelectorAll('.marginnote-ref');
		const defs = document.querySelectorAll('.marginnote-def');

		// Create a map for quick lookup of related elements
		const refToDefMap = new Map();
		const defToRefsMap = new Map();

		// Build the relationship maps
		refs.forEach((ref) => {
			const href = ref.getAttribute('href');
			if (href && href.startsWith('#')) {
				const defId = href.substring(1);
				const def = document.getElementById(defId);
				if (def) {
					const refWrap = ref.parentNode;
					refToDefMap.set(refWrap, def);

					// Add this ref to the definition's refs array
					if (!defToRefsMap.has(def)) {
						defToRefsMap.set(def, []);
					}
					defToRefsMap.get(def).push(refWrap);
				}
			}
		});

		// Add hover effects for references
		refs.forEach((ref) => {
			const refWrap = ref.parentNode;
			const relatedDef = refToDefMap.get(refWrap);
			if (relatedDef) {
				// When hovering over reference, apply hover effect to definition
				refWrap.addEventListener('mouseenter', () => {
					relatedDef.classList.add('hover-effect');
				});

				refWrap.addEventListener('mouseleave', () => {
					relatedDef.classList.remove('hover-effect');
				});

				ref.addEventListener('click', (event) => {
					// Convert rem to px and compare to xl (80rem)
					if (
						window.innerWidth <=
						80 * parseFloat(getComputedStyle(document.documentElement).fontSize)
					) {
						event.stopPropagation();
						event.preventDefault();
						relatedDef.classList.toggle('toggle-effect');
					}
				});
			}
		});

		// Add hover effects for definitions
		defs.forEach((def) => {
			const relatedRefs = defToRefsMap.get(def);
			if (relatedRefs) {
				// When hovering over definition, apply hover effect to all related references
				def.addEventListener('mouseenter', () => {
					relatedRefs.forEach((refWrap) => {
						refWrap.classList.add('hover-effect');
					});
				});

				def.addEventListener('mouseleave', () => {
					relatedRefs.forEach((refWrap) => {
						refWrap.classList.remove('hover-effect');
					});
				});
			}
		});
	})();
</script>
