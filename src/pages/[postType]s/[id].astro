---
import { getCollection, render } from 'astro:content';
import ContentLayout from '../../layouts/ContentLayout.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { extractWorksCited, processBlurb } from '../../lib/utils';
import { threadTitles } from '../../lib/enums';

export async function getStaticPaths() {
	const posts = await getCollection('posts');
	return posts.map((post) => ({
		params: { id: post.id, postType: post.data.type },
		props: { post },
	}));
}

const { post } = Astro.props;
const { Content } = await render(post);

const worksCited = await extractWorksCited(post.body);
console.log(worksCited)

const blurb = post.data.blurb ? processBlurb(post.data.blurb) : '';
---

<ContentLayout title={post.data.title}>
	<div class="mx-auto mt-6 flex max-w-7xl flex-col">
		{
			post.data.thread && (
				<div class="flex flex-row">
					<div class="relative h-24 w-64">
						<a
							href={'/threads/' + post.data.thread}
							class="bg-electric-blue absolute bottom-0 flex w-64 translate-y-20 transform cursor-pointer flex-col rounded-t-4xl py-6 text-center font-mono text-lg transition-transform duration-300 ease-in-out hover:translate-y-4">
							<span class="text-white">{threadTitles[post.data.thread]}</span>
							<span class="mt-6 text-balance text-black">
								read more in {threadTitles[post.data.thread]}
							</span>
						</a>
					</div>
					<div id="works-cited-tab"
						class="bg-black h-24 w-64 cursor-pointer rounded-t-4xl py-6 text-center translate-y-5 font-mono text-lg transition-transform duration-300 ease-in-out hover:translate-y-3">
						<span class="text-white">works cited</span>
					</div>
				</div>
			)
		}
		<div class="border-electric-blue relative flex flex-row border-10 bg-white">
			<aside class="border-black-200 hidden w-64 border-r lg:block">
				<div>
					<p class="p-4 font-mono text-sm text-gray-500">
						ebr is an online, open access, peer-reviewed journal of critical writing produced and
						published by the emergent digital literary network.
					</p>
				</div>
			</aside>

			<div class="relative w-full flex-1 lg:min-w-3xl ">
				<div class="px-4 py-8">
					<article class="prose m-auto text-lg">
						<h1 class="mb-8 text-3xl font-semibold dark:text-gray-50">
							{post.data.title}
						</h1>
						<a href="">{post.data.title}</a>
						<Content />
					</article>

					{worksCited && <article id="works-cited-article" class="prose  m-auto text-lg hidden" set:html={worksCited}></article>}
				</div>
			</div>

			<!-- Right aside -->
			<aside class="border-black-200 mt-20 hidden w-64 border-l xl:block">
				<div class="bg-electric-blue float-right mr-[-0.5rem] w-[15rem] p-2 text-white">
					<h4 class="font-medium tracking-wider">Glosses â–¼</h4>
				</div>
			</aside>
		</div>
	</div>
</ContentLayout>

<script is:inline data-astro-rerun>

	(() => {

		document.getElementById("works-cited-tab").addEventListener("click", () => {
			document.querySelectorAll("article").forEach((el) => {
				el.classList.toggle("hidden");
			});
		});

		// Get all margin note references and definitions
		const refs = document.querySelectorAll('.marginnote-ref');
		const defs = document.querySelectorAll('.marginnote-def');

		// Create a map for quick lookup of related elements
		const refToDefMap = new Map();
		const defToRefsMap = new Map();

		// Build the relationship maps
		refs.forEach((ref) => {
			const href = ref.getAttribute('href');
			if (href && href.startsWith('#')) {
				const defId = href.substring(1);
				const def = document.getElementById(defId);
				if (def) {
					const refWrap = ref.parentNode;
					refToDefMap.set(refWrap, def);

					// Add this ref to the definition's refs array
					if (!defToRefsMap.has(def)) {
						defToRefsMap.set(def, []);
					}
					defToRefsMap.get(def).push(refWrap);
				}
			}
		});

		// Add hover effects for references
		refs.forEach((ref) => {
			const refWrap = ref.parentNode;
			const relatedDef = refToDefMap.get(refWrap);
			if (relatedDef) {
				// When hovering over reference, apply hover effect to definition
				refWrap.addEventListener('mouseenter', () => {
					relatedDef.classList.add('hover-effect');
				});

				refWrap.addEventListener('mouseleave', () => {
					relatedDef.classList.remove('hover-effect');
				});

				ref.addEventListener('click', (event) => {
					// Convert rem to px and compare to xl (80rem)
					if (
						window.innerWidth <=
						80 * parseFloat(getComputedStyle(document.documentElement).fontSize)
					) {
						event.stopPropagation();
						event.preventDefault();
						relatedDef.classList.toggle('toggle-effect');
					}
				});
			}
		});

		// Add hover effects for definitions
		defs.forEach((def) => {
			const relatedRefs = defToRefsMap.get(def);
			if (relatedRefs) {
				// When hovering over definition, apply hover effect to all related references
				def.addEventListener('mouseenter', () => {
					relatedRefs.forEach((refWrap) => {
						refWrap.classList.add('hover-effect');
					});
				});

				def.addEventListener('mouseleave', () => {
					relatedRefs.forEach((refWrap) => {
						refWrap.classList.remove('hover-effect');
					});
				});
			}
		});
	})();
</script>
