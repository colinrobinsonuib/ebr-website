---
import { type ReferenceDataEntry, getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import { threads, threadTitles, threadColors } from '../lib/threads';
import PostSnippet from '../components/widget/PostSnippet.astro';
import { getPublishedPosts } from '../lib/getPosts';

const publishedPosts = await getPublishedPosts();
const latestPosts = publishedPosts.slice(0, 15);

type ThreadSummary = {
	slug: string;
	title: string;
	authors: ReferenceDataEntry<'authors'>[];
	publish_date: Date;
};
const latestPostByThread = publishedPosts.reduce<Record<string, ThreadSummary>>((acc, post) => {
	const { thread, slug, title, authors, publish_date } = post.data;
	// skip any posts without a thread
	if (!thread) return acc;

	const existing = acc[thread];
	// if first time seeing this thread, or this post is newer
	if (!existing || publish_date > existing.publish_date) {
		acc[thread] = { slug, title, authors, publish_date };
	}

	return acc;
}, {});

let latestPostsYear: number | null = null;
---

<BaseLayout title="ebr">
	<div
		class="mx-auto mt-10 flex min-h-96 max-w-7xl flex-col overflow-hidden border bg-white"
		style="border-top-left-radius: 4rem; border-top-right-radius: 4rem;">
		<header class="mx-auto mt-30 text-center">
			<h1 class="text-7xl font-semibold text-black">electronic book review</h1>
			<p class="mt-6 font-serif text-2xl font-light tracking-tight text-neutral-600">
				digital futures of literature, theory, criticism, and the arts
			</p>
			<nav class="mt-20 mb-30 items-center space-x-4 text-xl">
				<a
					href="/about"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					about
				</a>
				<span class="text-gray-400">|</span>
				<a
					href="/submissions"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					submissions
				</a>
				<span class="text-gray-400">|</span>
				<a
					href="/publications"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					publications
				</a>
				<span class="text-gray-400">|</span>
				<a
					href="/gatherings"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					gatherings
				</a>
				<span class="text-gray-400">|</span>
				<a
					href="/newsletters"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					newsletters
				</a>
				<span class="text-gray-400">|</span>
				<a
					href="/subscribe"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					subscribe
				</a>
			</nav>
		</header>

		<div class="relative">
			<div id="tabs-container" class="relative"></div>
			<div id="sort_bar" class="flex flex-row px-6 font-mono text-lg">
				<span class="text-gray-200">Sort by:</span>
				<div class="ml-6 text-white">
					<button class="text-red-500">latest</button>
					<span class="text-gray-400">|</span>
					<button>oldest</button>
				</div>
			</div>
		</div>

		<main class="z-50 bg-white px-6">
			{
				latestPosts.map((post) => {
					const year = post.data.publish_date.getFullYear();
					const yearChanged = year !== latestPostsYear;
					latestPostsYear = year;
					return (
						<>
							{yearChanged && <h2 class="my-6 ml-41 text-5xl font-black">{year}</h2>}
							<PostSnippet post={post} />
						</>
					);
				})
			}
		</main>
	</div>

	<script
		is:inline
		define:vars={{ threads, threadTitles, threadColors, latestPostByThread }}
		data-astro-rerun
	>
		(() => {
			const container = document.getElementById('tabs-container');
			let globalIndex = 0;
			for (let rowIndex = 0; rowIndex < 3; rowIndex++) {
				const row = document.createElement('div');
				row.className = `tab-row-${rowIndex} flex relative z-${rowIndex * 10}`;

				for (let tabIndex = 0; tabIndex < 5; tabIndex++) {
					if (rowIndex === 0 && (tabIndex === 3 || tabIndex === 4)) continue;
					const tabContainer = createTab(rowIndex, tabIndex, threads[globalIndex]);
					row.appendChild(tabContainer);
					globalIndex++;
				}

				container.appendChild(row);
			}

			function createTab(rowIndex, tabIndex, thread) {
				const globalIndex = rowIndex * 5 + tabIndex;
				const label = threadTitles[thread];
				const color = threadColors[thread];

				let description = 'Placeholder';

				if (latestPostByThread[thread]) {
					description =
						'<div class="flex flex-row justify-between w-full mx-10">' +
						`<a class="italic text-2xl font-semibold hover:underline" href="/essays/${latestPostByThread[thread].slug}">Read the latest post &gt;</a>` +
						'<div class="flex flex-col">';

					description += '<span class="text-2xl">' + latestPostByThread[thread].title + '</span>';
					const authors = latestPostByThread[thread].authors
						.map((author) => {
							return author.id.replace('-', ' ');
						})
						.reduce((prev, curr) => [prev, ', ', curr]);
					const publish_date = new Intl.DateTimeFormat('en-GB', {
						day: '2-digit',
						month: 'short',
						year: 'numeric',
					})
						.format(new Date(latestPostByThread[thread].publish_date))
						.replace(/ /g, '-');
					description += '<span class="capitalize">by ' + authors + ', ' + publish_date + '</span>';
					description += '</div></div>';
				}

				const tabContainer = document.createElement('div');
				tabContainer.className = `tab-container`;

				const tab = document.createElement('div');
				tab.className = `tab rounded-t-4xl  flex items-center justify-center shadow-md relative`;
				tab.style.backgroundColor = color;
				tab.innerHTML = `<a href="/threads/${thread}" class="text-white font-medium text-lg">${label}</a>`;

				const tabContent = document.createElement('div');
				tabContent.className = `tab-content flex items-center justify-center px-4 shadow-md`;
				tabContent.style.backgroundColor = color;
				tabContent.innerHTML = description;

				tabContainer.appendChild(tab);
				tabContainer.appendChild(tabContent);

				return tabContainer;
			}
		})();
	</script>
</BaseLayout>
