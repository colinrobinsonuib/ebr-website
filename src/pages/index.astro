---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import { threads, threadTitles, threadColors } from '../lib/threads';
import PostSnippet from '../components/widget/PostSnippet.astro';

let allPosts = await getCollection('posts');
allPosts = allPosts.filter((item) => !item.data.draft);
allPosts.sort(
	(a, b) => new Date(b.data.publish_date).getTime() - new Date(a.data.publish_date).getTime(),
);
const latestPosts = allPosts.slice(0, 15);
// Track last rendered year
let latestPostsYear: number | null = null;
---

<BaseLayout title="ebr">
	<div
		class="mx-auto mt-10 flex min-h-96 max-w-7xl flex-col overflow-hidden border bg-white"
		style="border-top-left-radius: 4rem; border-top-right-radius: 4rem;">
		<header class="mx-auto mt-30 text-center">
			<h1 class="text-7xl font-semibold text-black">electronic book review</h1>
			<p class="mt-6 font-serif text-2xl font-light tracking-tight text-neutral-600">
				digital futures of literature, theory, criticism, and the arts
			</p>
			<nav class="mt-20 mb-30 items-center space-x-4 text-xl">
				<a
					href="/about"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					about
				</a>
				<span class="text-gray-400">|</span>
				<a
					href="/submissions"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					submissions
				</a>
				<span class="text-gray-400">|</span>
				<a
					href="/publications"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					publications
				</a>
				<span class="text-gray-400">|</span>
				<a
					href="/gatherings"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					gatherings
				</a>
				<span class="text-gray-400">|</span>
				<a
					href="/newsletters"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					newsletters
				</a>
				<span class="text-gray-400">|</span>
				<a
					href="/subscribe"
					class="border-b border-transparent text-black transition-colors hover:border-black">
					subscribe
				</a>
			</nav>
		</header>

		<div class="relative">
			<div id="tabs-container" class="relative"></div>
			<div id="sort_bar" class="flex flex-row px-6 font-mono text-lg">
				<span class="text-gray-200">Sort by:</span>
				<div class="ml-6 text-white">
					<button class="text-red-500">latest</button>
					<span class="text-gray-400">|</span>
					<button>oldest</button>
				</div>
			</div>
		</div>

		<main class="z-50 bg-white px-6">
			{
				latestPosts.map((post) => {
					const year = new Date(post.data.publish_date).getFullYear();
					const yearChanged = year !== latestPostsYear;
					latestPostsYear = year;
					return (
						<>
							{yearChanged && <h2 class="my-6 ml-41 text-5xl">{year}</h2>}
							<PostSnippet post={post} />
						</>
					);
				})
			}
		</main>
	</div>

	<script is:inline define:vars={{ threads, threadTitles, threadColors }} data-astro-rerun>
		(() => {
			const container = document.getElementById('tabs-container');
			let globalIndex = 0;
			for (let rowIndex = 0; rowIndex < 3; rowIndex++) {
				const row = document.createElement('div');
				row.className = `tab-row-${rowIndex} flex relative z-${rowIndex * 10}`;

				for (let tabIndex = 0; tabIndex < 5; tabIndex++) {
					if (rowIndex === 0 && (tabIndex === 3 || tabIndex === 4)) continue;
					const tabContainer = createTab(rowIndex, tabIndex, threads[globalIndex]);
					row.appendChild(tabContainer);
					globalIndex++;
				}

				container.appendChild(row);
			}

			function createTab(rowIndex, tabIndex, thread) {
				const globalIndex = rowIndex * 5 + tabIndex;
				const label = threadTitles[thread];
				const color = threadColors[thread];
				const description = `This is the content for Tab ${globalIndex + 1}. It contains important information and details about this particular tab.`;

				const tabContainer = document.createElement('div');
				tabContainer.className = `tab-container`;

				const tab = document.createElement('div');
				tab.className = `tab rounded-t-4xl  flex items-center justify-center shadow-md relative`;
				tab.style.backgroundColor = color;
				tab.innerHTML = `<span class="text-white font-medium text-lg">${label}</span>`;

				const tabContent = document.createElement('div');
				tabContent.className = `tab-content flex items-center justify-center px-4 shadow-md`;
				tabContent.style.backgroundColor = color;
				tabContent.innerHTML = `<span class="text-white text-xs text-center leading-tight">${description}</span>`;

				setTimeout(() => {
					const rect = tab.getBoundingClientRect();
					tabContent.style.left = `${window.scrollX - rect.left}px`;
				}, 1);

				tabContainer.appendChild(tab);
				tabContainer.appendChild(tabContent);

				return tabContainer;
			}
		})();
	</script>
</BaseLayout>
